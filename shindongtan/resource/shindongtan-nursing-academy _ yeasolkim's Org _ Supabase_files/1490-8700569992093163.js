!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="8fb385f9-4e4a-48ff-bce8-2b401cd1e922",e._sentryDebugIdIdentifier="sentry-dbid-8fb385f9-4e4a-48ff-bce8-2b401cd1e922")}catch(e){}}();"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1490],{8723:(e,n,t)=>{t.d(n,{Lh:()=>u,T_:()=>h});var a=t(32144),r=t(80251),s=t(73969),o=t(26616),i=t.n(o),l=t(96557),c=t(45942),d=t(95059);let u="pgmq_public",m=i()("\ncreate schema if not exists ".concat(u,";\ngrant usage on schema ").concat(u," to postgres, anon, authenticated, service_role;\n\ncreate or replace function ").concat(u,".pop(\n    queue_name text\n)\n  returns setof pgmq.message_record\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.pop(\n        queue_name := queue_name\n    );\nend;\n$$;\n\ncomment on function ").concat(u,".pop(queue_name text) is 'Retrieves and locks the next message from the specified queue.';\n\n\ncreate or replace function ").concat(u,".send(\n    queue_name text,\n    message jsonb,\n    sleep_seconds integer default 0  -- renamed from 'delay'\n)\n  returns setof bigint\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.send(\n        queue_name := queue_name,\n        msg := message,\n        delay := sleep_seconds\n    );\nend;\n$$;\n\ncomment on function ").concat(u,".send(queue_name text, message jsonb, sleep_seconds integer) is 'Sends a message to the specified queue, optionally delaying its availability by a number of seconds.';\n\n\ncreate or replace function ").concat(u,".send_batch(\n    queue_name text,\n    messages jsonb[],\n    sleep_seconds integer default 0  -- renamed from 'delay'\n)\n  returns setof bigint\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.send_batch(\n        queue_name := queue_name,\n        msgs := messages,\n        delay := sleep_seconds\n    );\nend;\n$$;\n\ncomment on function ").concat(u,".send_batch(queue_name text, messages jsonb[], sleep_seconds integer) is 'Sends a batch of messages to the specified queue, optionally delaying their availability by a number of seconds.';\n\n\ncreate or replace function ").concat(u,".archive(\n    queue_name text,\n    message_id bigint\n)\n  returns boolean\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return\n    pgmq.archive(\n        queue_name := queue_name,\n        msg_id := message_id\n    );\nend;\n$$;\n\ncomment on function ").concat(u,".archive(queue_name text, message_id bigint) is 'Archives a message by moving it from the queue to a permanent archive.';\n\n\ncreate or replace function ").concat(u,".delete(\n    queue_name text,\n    message_id bigint\n)\n  returns boolean\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return\n    pgmq.delete(\n        queue_name := queue_name,\n        msg_id := message_id\n    );\nend;\n$$;\n\ncomment on function ").concat(u,".delete(queue_name text, message_id bigint) is 'Permanently deletes a message from the specified queue.';\n\ncreate or replace function ").concat(u,".read(\n    queue_name text,\n    sleep_seconds integer,\n    n integer\n)\n  returns setof pgmq.message_record\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.read(\n        queue_name := queue_name,\n        vt := sleep_seconds,\n        qty := n\n    );\nend;\n$$;\n\ncomment on function ").concat(u,'.read(queue_name text, sleep_seconds integer, n integer) is \'Reads up to "n" messages from the specified queue with an optional "sleep_seconds" (visibility timeout).\';\n\n-- Grant execute permissions on wrapper functions to roles\ngrant execute on function ').concat(u,".pop(text) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.pop(text) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(u,".send(text, jsonb, integer) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.send(text, jsonb, integer) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(u,".send_batch(text, jsonb[], integer) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.send_batch(text, jsonb[], integer) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(u,".archive(text, bigint) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.archive(text, bigint) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(u,".delete(text, bigint) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.delete(text, bigint) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(u,".read(text, integer, integer) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.read(text, integer, integer) to postgres, service_role, anon, authenticated;\n\n-- For the service role, we want full access\n-- Grant permissions on existing tables\ngrant all privileges on all tables in schema pgmq to postgres, service_role;\n\n-- Ensure service_role has permissions on future tables\nalter default privileges in schema pgmq grant all privileges on tables to postgres, service_role;\n\ngrant usage on schema pgmq to postgres, anon, authenticated, service_role;\n\n\n/*\n  Grant access to sequences to API roles by default. Existing table permissions\n  continue to enforce insert restrictions. This is necessary to accommodate the\n  on-backup hook that rebuild queue table primary keys to avoid a pg_dump segfault.\n  This can be removed once logical backups are completely retired.\n*/\ngrant usage, select, update\non all sequences in schema pgmq\nto anon, authenticated, service_role;\n\nalter default privileges in schema pgmq\ngrant usage, select, update\non sequences\nto anon, authenticated, service_role;\n")),p=i()("\n  drop function if exists \n    ".concat(u,".pop(queue_name text),\n    ").concat(u,".send(queue_name text, message jsonb, sleep_seconds integer),\n    ").concat(u,".send_batch(queue_name text, message jsonb[], sleep_seconds integer),\n    ").concat(u,".archive(queue_name text, message_id bigint),\n    ").concat(u,".delete(queue_name text, message_id bigint),\n    ").concat(u,".read(queue_name text, sleep integer, n integer)\n  ;\n\n  -- Revoke execute permissions on inner pgmq functions to roles (inverse of enabling)\n  do $$\n  begin\n      if exists (select 1 from pg_namespace where nspname = 'pgmq') then\n          -- Revoke privileges on the schema itself\n          revoke all on schema pgmq from anon, authenticated, service_role;\n          \n          -- Revoke default privileges for future objects\n          alter default privileges in schema pgmq revoke all on tables from anon, authenticated, service_role;\n          alter default privileges in schema pgmq revoke all on sequences from anon, authenticated, service_role;\n          alter default privileges in schema pgmq revoke all on functions from anon, authenticated, service_role;\n      end if;\n  end $$;\n\n  drop schema if exists ").concat(u,";\n"));async function g(e){let{projectRef:n,connectionString:t,enable:a}=e,{result:r}=await (0,l.E)({projectRef:n,connectionString:t,sql:a?m:p,queryKey:["toggle-queues-exposure"]});return r}let h=function(){let{onSuccess:e,onError:n,...t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=(0,a.jE)();return(0,r.n)(e=>g(e),{async onSuccess(n,t,a){let{projectRef:r}=t;await o.invalidateQueries(c.m.exposePostgrestStatus(r)),o.invalidateQueries(d.c.schemas(r)),await (null==e?void 0:e(n,t,a))},async onError(e,t,a){void 0===n?s.oR.error("Failed to toggle queue exposure via PostgREST: ".concat(e.message)):n(e,t,a)},...t})}},39992:(e,n,t)=>{t.d(n,{AM:()=>j,I:()=>_,KV:()=>g,Lj:()=>o,_c:()=>m,ao:()=>l,cx:()=>d,e2:()=>E,hB:()=>f,n0:()=>r,th:()=>v,yB:()=>q});let a=["smallint","integer","bigint","decimal","numeric","real","double precision","serial","bigserial","int2","int4","int8","float4","float8","smallserial","serial2","serial4","serial8"];function r(e){return a.indexOf(e.toLowerCase())>-1}let s=["json","jsonb","array"];function o(e){return s.indexOf(e.toLowerCase())>-1}let i=["array"];function l(e){return i.indexOf(e.toLowerCase())>-1}let c=["uuid","text","character varying"];function d(e){return c.indexOf(e.toLowerCase())>-1}let u=["citext"];function m(e){return u.indexOf(e.toLowerCase())>-1}let p=["timestamp","timestamptz"];function g(e){return p.indexOf(e.toLowerCase())>-1}let h=["date"];function f(e){return h.indexOf(e.toLowerCase())>-1}let b=["time","timetz"];function _(e){return b.indexOf(e.toLowerCase())>-1}let y=["boolean","bool"];function v(e){return y.indexOf(e.toLowerCase())>-1}let x=["user-defined"];function j(e){return x.indexOf(e.toLowerCase())>-1}let w=["bytea"];function q(e){return w.indexOf(e.toLowerCase())>-1}function E(e){var n;let{targetTableSchema:t,targetTableName:a,targetColumnName:r}=null!=(n=null==e?void 0:e.foreignKey)?n:{};return!!t&&!!a&&!!r}},43970:(e,n,t)=>{t.d(n,{A:()=>u,b:()=>d});var a=t(80263),r=t(53239),s=t(67920),o=t(71126),i=t(70324),l=t(82008),c=t(55866);let d=e=>{let{visible:n,onClose:t}=e;return(0,a.jsx)(s.A,{size:"medium",visible:n,header:"Schemas managed by Supabase",customFooter:(0,a.jsx)("div",{className:"flex items-center justify-end space-x-2",children:(0,a.jsx)(o.$,{type:"default",onClick:()=>t(),children:"Understood"})}),onCancel:()=>t(),"data-sentry-element":"Modal","data-sentry-component":"ProtectedSchemaModal","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:(0,a.jsxs)(s.A.Content,{className:"space-y-2","data-sentry-element":"unknown","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:[(0,a.jsx)("p",{className:"text-sm",children:"The following schemas are managed by Supabase and are currently protected from write access through the dashboard."}),(0,a.jsx)("div",{className:"flex flex-wrap gap-1",children:l.i.map(e=>(0,a.jsx)("code",{className:"text-xs",children:e},e))}),(0,a.jsx)("p",{className:"text-sm !mt-4",children:"These schemas are critical to the functionality of your Supabase project and hence we highly recommend not altering them."}),(0,a.jsx)("p",{className:"text-sm",children:"You can, however, still interact with those schemas through the SQL Editor although we advise you only do so if you know what you are doing."})]})})},u=e=>{let{schema:n,entity:t}=e,[s,l]=(0,r.useState)(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.Fc,{"data-sentry-element":"Alert_Shadcn_","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:[(0,a.jsx)(c.A,{strokeWidth:2,"data-sentry-element":"AlertCircle","data-sentry-source-file":"ProtectedSchemaWarning.tsx"}),(0,a.jsxs)(i.XL,{"data-sentry-element":"AlertTitle_Shadcn_","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:["Currently viewing ",t," from a protected schema"]}),(0,a.jsxs)(i.TN,{"data-sentry-element":"AlertDescription_Shadcn_","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:[(0,a.jsxs)("p",{className:"mb-2",children:["The ",(0,a.jsx)("code",{className:"text-xs",children:n})," schema is managed by Supabase and is read-only through the dashboard."]}),(0,a.jsx)(o.$,{type:"default",size:"tiny",onClick:()=>l(!0),"data-sentry-element":"Button","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:"Learn more"})]})]}),(0,a.jsx)(d,{visible:s,onClose:()=>l(!1),"data-sentry-element":"ProtectedSchemaModal","data-sentry-source-file":"ProtectedSchemaWarning.tsx"})]})}},44914:(e,n,t)=>{t.d(n,{li:()=>h,q3:()=>g,tv:()=>f});var a=t(80263),r=t(32144),s=t(47504),o=t(53239),i=t(417),l=t(97872),c=t(49015),d=t(74945),u=t(32036),m=t(39321),p=t(77723);function g(e){let{queryClient:n,projectRef:t,connectionString:a,id:r,sorts:s,filters:o,roleImpersonationState:l}=e;return(0,c.Nj)(n,{projectRef:t,connectionString:a,id:r}).then(e=>{if(e){var c;let u=(0,i.rH)(e),{sorts:p=[],filters:g=[]}=null!=(c=(0,i.Tk)(t,e.name,e.schema))?c:{};(0,d.nk)(n,{projectRef:t,connectionString:a,tableId:r,sorts:null!=s?s:(0,i.FU)(u.name,p),filters:null!=o?o:(0,i.hl)(g),page:1,limit:m.to,roleImpersonationState:l})}})}function h(){let e=(0,s.useRouter)(),n=(0,r.jE)(),{project:t}=(0,l.Om)(),a=(0,u.RY)();return(0,o.useCallback)(r=>{let{id:s,filters:o,sorts:i}=r,l=s?Number(s):void 0;!t||!l||isNaN(l)||(e.prefetch("/project/".concat(t.ref,"/editor/").concat(l)),g({queryClient:n,projectRef:t.ref,connectionString:t.connectionString,id:l,sorts:i,filters:o,roleImpersonationState:a}).catch(()=>{}))},[t,n,a,e])}function f(e){let{projectRef:n,id:t,sorts:r,filters:s,href:o,children:i,...l}=e,c=h();return(0,a.jsx)(p.A,{href:o||"/project/".concat(n,"/editor/").concat(t),prefetcher:()=>c({id:t,sorts:r,filters:s}),...l,"data-sentry-element":"PrefetchableLink","data-sentry-component":"EditorTablePageLink","data-sentry-source-file":"project.$ref.editor.$id.tsx",children:i})}},45942:(e,n,t)=>{t.d(n,{m:()=>a});let a={create:()=>["queues","create"],delete:e=>["queues",e,"delete"],purge:e=>["queues",e,"purge"],getMessagesInfinite:(e,n,t)=>["projects",e,"queue-messages",n,t].filter(Boolean),list:e=>["projects",e,"queues"],metrics:(e,n)=>["projects",e,"queue-metrics",n],exposePostgrestStatus:e=>["projects",e,"queue-expose-status"]}},49015:(e,n,t)=>{t.d(n,{Ap:()=>l,Nj:()=>d,Pk:()=>c});var a=t(56947),r=t(96557),s=t(73370),o=t(26616),i=t.n(o);async function l(e,n){var t,a;let{projectRef:s,connectionString:o,id:l}=e;if(!l)throw Error("id is required");let c=l?i()("\n    with base_table_info as (\n        select \n            c.oid::int8 as id,\n            nc.nspname as schema,\n            c.relname as name,\n            c.relkind,\n            c.relrowsecurity as rls_enabled,\n            c.relforcerowsecurity as rls_forced,\n            c.relreplident,\n            c.relowner,\n            obj_description(c.oid) as comment\n        from pg_class c\n        join pg_namespace nc on nc.oid = c.relnamespace\n        where c.oid = ".concat(l,"\n            and not pg_is_other_temp_schema(nc.oid)\n            and (\n                pg_has_role(c.relowner, 'USAGE')\n                or has_table_privilege(\n                    c.oid,\n                    'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'\n                )\n                or has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES')\n            )\n    ),\n    table_stats as (\n        select \n            b.id,\n            case\n                when b.relreplident = 'd' then 'DEFAULT'\n                when b.relreplident = 'i' then 'INDEX'\n                when b.relreplident = 'f' then 'FULL'\n                else 'NOTHING'\n            end as replica_identity,\n            pg_total_relation_size(format('%I.%I', b.schema, b.name))::int8 as bytes,\n            pg_size_pretty(pg_total_relation_size(format('%I.%I', b.schema, b.name))) as size,\n            pg_stat_get_live_tuples(b.id) as live_rows_estimate,\n            pg_stat_get_dead_tuples(b.id) as dead_rows_estimate\n        from base_table_info b\n        where b.relkind in ('r', 'p')\n    ),\n    primary_keys as (\n        select \n            i.indrelid as table_id,\n            jsonb_agg(jsonb_build_object(\n                'schema', n.nspname,\n                'table_name', c.relname,\n                'table_id', i.indrelid::int8,\n                'name', a.attname\n            )) as primary_keys\n        from pg_index i\n        join pg_class c on i.indrelid = c.oid\n        join pg_attribute a on (a.attrelid = c.oid and a.attnum = any(i.indkey))\n        join pg_namespace n on c.relnamespace = n.oid\n        where i.indisprimary\n        group by i.indrelid\n    ),\n    relationships as (\n        select \n            c.conrelid as source_id,\n            c.confrelid as target_id,\n            jsonb_build_object(\n                'id', c.oid::int8,\n                'constraint_name', c.conname,\n                'deletion_action', c.confdeltype,\n                'update_action', c.confupdtype,\n                'source_schema', nsa.nspname,\n                'source_table_name', csa.relname,\n                'source_column_name', sa.attname,\n                'target_table_schema', nta.nspname,\n                'target_table_name', cta.relname,\n                'target_column_name', ta.attname\n            ) as rel_info\n        from pg_constraint c\n        join pg_class csa on c.conrelid = csa.oid\n        join pg_namespace nsa on csa.relnamespace = nsa.oid\n        join pg_attribute sa on (sa.attrelid = c.conrelid and sa.attnum = any(c.conkey))\n        join pg_class cta on c.confrelid = cta.oid\n        join pg_namespace nta on cta.relnamespace = nta.oid\n        join pg_attribute ta on (ta.attrelid = c.confrelid and ta.attnum = any(c.confkey))\n        where c.contype = 'f'\n    ),\n    columns as (\n        select \n            a.attrelid as table_id,\n            jsonb_agg(jsonb_build_object(\n                'id', (a.attrelid || '.' || a.attnum),\n                'table_id', c.oid::int8,\n                'schema', nc.nspname,\n                'table', c.relname,\n                'ordinal_position', a.attnum,\n                'name', a.attname,\n                'default_value', case \n                    when a.atthasdef then pg_get_expr(ad.adbin, ad.adrelid)\n                    else null\n                end,\n                'data_type', case \n                    when t.typtype = 'd' then \n                        case \n                            when bt.typelem <> 0::oid and bt.typlen = -1 then 'ARRAY'\n                            when nbt.nspname = 'pg_catalog' then format_type(t.typbasetype, null)\n                            else 'USER-DEFINED'\n                        end\n                    else \n                        case \n                            when t.typelem <> 0::oid and t.typlen = -1 then 'ARRAY'\n                            when nt.nspname = 'pg_catalog' then format_type(a.atttypid, null)\n                            else 'USER-DEFINED'\n                        end\n                end,\n                'format', case\n                    when t.typtype = 'e' then\n                        case\n                            when nt.nspname <> 'public' then concat(nt.nspname, '.', coalesce(bt.typname, t.typname))\n                            else coalesce(bt.typname, t.typname)\n                        end\n                    else\n                        coalesce(bt.typname, t.typname)\n                end,\n                'is_identity', a.attidentity in ('a', 'd'),\n                'identity_generation', case a.attidentity\n                    when 'a' then 'ALWAYS'\n                    when 'd' then 'BY DEFAULT'\n                    else null\n                end,\n                'is_generated', a.attgenerated in ('s'),\n                'is_nullable', not (a.attnotnull or t.typtype = 'd' and t.typnotnull),\n                'is_updatable', (\n                    b.relkind in ('r', 'p') or \n                    (b.relkind in ('v', 'f') and pg_column_is_updatable(b.id, a.attnum, false))\n                ),\n                'is_unique', uniques.table_id is not null,\n                'check', check_constraints.definition,\n                'comment', col_description(c.oid, a.attnum),\n                'enums', coalesce(\n                    (\n                        select jsonb_agg(e.enumlabel order by e.enumsortorder)\n                        from pg_catalog.pg_enum e\n                        where e.enumtypid = coalesce(bt.oid, t.oid)\n                            or e.enumtypid = coalesce(bt.typelem, t.typelem)\n                    ),\n                    '[]'::jsonb\n                )\n            ) order by a.attnum) as columns\n        from pg_attribute a\n        join base_table_info b on a.attrelid = b.id\n        join pg_class c on a.attrelid = c.oid\n        join pg_namespace nc on c.relnamespace = nc.oid\n        left join pg_attrdef ad on (a.attrelid = ad.adrelid and a.attnum = ad.adnum)\n        join pg_type t on a.atttypid = t.oid\n        join pg_namespace nt on t.typnamespace = nt.oid\n        left join pg_type bt on (t.typtype = 'd' and t.typbasetype = bt.oid)\n        left join pg_namespace nbt on bt.typnamespace = nbt.oid\n        left join (\n            select \n                conrelid as table_id,\n                conkey[1] as ordinal_position\n            from pg_catalog.pg_constraint\n            where contype = 'u' and cardinality(conkey) = 1\n            group by conrelid, conkey[1]\n        ) as uniques on uniques.table_id = a.attrelid and uniques.ordinal_position = a.attnum\n        left join (\n            select distinct on (conrelid, conkey[1])\n                conrelid as table_id,\n                conkey[1] as ordinal_position,\n                substring(\n                    pg_get_constraintdef(oid, true),\n                    8,\n                    length(pg_get_constraintdef(oid, true)) - 8\n                ) as definition\n            from pg_constraint\n            where contype = 'c' and cardinality(conkey) = 1\n            order by conrelid, conkey[1], oid asc\n        ) as check_constraints on check_constraints.table_id = a.attrelid \n                            and check_constraints.ordinal_position = a.attnum\n        where a.attnum > 0 \n        and not a.attisdropped\n        group by a.attrelid\n    )\n    select \n        case b.relkind\n            when 'r' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'rls_enabled', b.rls_enabled,\n                'rls_forced', b.rls_forced,\n                'replica_identity', ts.replica_identity,\n                'bytes', ts.bytes,\n                'size', ts.size,\n                'live_rows_estimate', ts.live_rows_estimate,\n                'dead_rows_estimate', ts.dead_rows_estimate,\n                'comment', b.comment,\n                'primary_keys', coalesce(pk.primary_keys, '[]'::jsonb),\n                'relationships', coalesce(\n                    (select jsonb_agg(r.rel_info)\n                    from relationships r\n                    where r.source_id = b.id or r.target_id = b.id), \n                    '[]'::jsonb\n                ),\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'p' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'rls_enabled', b.rls_enabled,\n                'rls_forced', b.rls_forced,\n                'replica_identity', ts.replica_identity,\n                'bytes', ts.bytes,\n                'size', ts.size,\n                'live_rows_estimate', ts.live_rows_estimate,\n                'dead_rows_estimate', ts.dead_rows_estimate,\n                'comment', b.comment,\n                'primary_keys', coalesce(pk.primary_keys, '[]'::jsonb),\n                'relationships', coalesce(\n                    (select jsonb_agg(r.rel_info)\n                    from relationships r\n                    where r.source_id = b.id or r.target_id = b.id), \n                    '[]'::jsonb\n                ),\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'v' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'is_updatable', (pg_relation_is_updatable(b.id, false) & 20) = 20,\n                'comment', b.comment,\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'm' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'is_populated', true,\n                'comment', b.comment,\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'f' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'comment', b.comment,\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n        end as entity\n    from base_table_info b\n    left join table_stats ts on b.id = ts.id\n    left join primary_keys pk on b.id = pk.table_id\n    left join columns c on b.id = c.table_id;\n  ")):"",{result:d}=await (0,r.E)({projectRef:s,connectionString:o,sql:c,queryKey:["table-editor",l]},n);return null!=(a=null==(t=d[0])?void 0:t.entity)?a:void 0}let c=function(e){let{projectRef:n,connectionString:t,id:r}=e,{enabled:o=!0,...i}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,a.I)(s.i.tableEditor(n,r),e=>{let{signal:a}=e;return l({projectRef:n,connectionString:t,id:r},a)},{enabled:o&&void 0!==n&&void 0!==r&&!isNaN(r),refetchOnWindowFocus:!1,refetchOnMount:!1,staleTime:3e5,...i})};function d(e,n){let{projectRef:t,connectionString:a,id:r}=n;return e.fetchQuery(s.i.tableEditor(t,r),e=>{let{signal:n}=e;return l({projectRef:t,connectionString:a,id:r},n)})}},52723:(e,n,t)=>{t.d(n,{b:()=>s,j:()=>o});var a=t(39992),r=t(42592);function s(e,n){let t=e.columns.find(e=>e.name==n.column);if(t&&(0,a.n0)(t.format)){let e=Number(n.value);if(!Number.isNaN(e)&&!(e>Number.MAX_SAFE_INTEGER))return Number(n.value)}return n.value}function o(e){let{table:n}=e;if(!(0,r.KO)(n))return{error:{message:"Only table rows can be updated or deleted"}};let t=n.primary_keys;return t&&0!=t.length?{primaryKeys:t.map(e=>e.name)}:{error:{message:"Please add a primary key column to your table to update or delete rows"}}}},55301:(e,n,t)=>{t.d(n,{BA:()=>o,SF:()=>s,yG:()=>p});var a=t(48596),r=t(44741);let s=10240,o=50,i=["text","varchar","char","character varying","character"],l=["json","jsonb"],c=new Set(l),d=new Set([...i,...l,"bytea","xml","hstore","clob","vector","geometry","geography","tsvector","tsquery","daterange","tsrange","tstzrange","numrange","int4range","int8range","cube","ltree","lquery","jsonpath","citext"]),u=e=>{var n;let t=null==(n=e.primary_keys)?void 0:n.map(e=>e.name);return t&&t.length>0?t:e.columns&&e.columns.length>0?[e.columns[0].name]:[]},m=e=>d.has(e.toLowerCase()),p=e=>{let{table:n,filters:t=[],sorts:l=[],page:d,limit:p,maxCharacters:g=s,maxArraySize:h=o}=e;if(!n||!n.columns)return"";let f=new r.X().from(n.name,n.schema).select();t.forEach(e=>{var t;let a=null==(t=n.columns)?void 0:t.find(n=>n.name===e.column),r=!a||i.includes(a.format);f=f.filter(e.column,e.operator,r||""!==e.value?e.value:null)});let b=n.live_rows_estimate||0;if(0===l.length&&b<=1e5&&n.columns.length>0){let e=u(n);e.length>0&&e.forEach(e=>{f=f.order(n.name,e)})}else l.forEach(e=>{f=f.order(e.table,e.column,e.ascending,e.nullsFirst)});let{from:_,to:y}=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,t=e?e*n:0;return{from:t,to:e?t+n-1:n-1}}((null!=d?d:1)-1,p),v="with _base_query as (".concat(f.range(_,y).toSql({isCTE:!1,isFinal:!1}),")"),x=n.columns.sort((e,n)=>e.ordinal_position-n.ordinal_position).map(e=>({name:e.name,format:e.format.toLowerCase()})),j=n.columns.filter(e=>m(e.format)).map(e=>e.name),w=x.map(e=>{let{name:n}=e,t=(0,a.bD)(n);return j.includes(n)?"case\n        when octet_length(".concat(t,"::text) > ").concat(g," \n        then left(").concat(t,"::text, ").concat(g,") || '...'\n        else ").concat(t,"::text\n      end as ").concat(t):t});n.columns.filter(e=>"array"===e.data_type.toLowerCase()).map(e=>({name:e.name,format:e.format.toLowerCase().slice(1)})).forEach(e=>{let{name:n,format:t}=e,r=w.findIndex(e=>e===(0,a.bD)(n)),s=c.has(t)?"".concat(t,"[]"):"text[]",o="text[]"===s?"array['...']":"array['{\"truncated\": true}'::json]";r>=0&&(w[r]="\n        case \n          when octet_length(".concat((0,a.bD)(n),"::text) > ").concat(g," \n          then\n            case\n              when array_ndims(").concat((0,a.bD)(n),") = 1\n              then\n                (select array_cat(").concat((0,a.bD)(n),"[1:").concat(h,"]::").concat(s,", ").concat(o,"::").concat(s,"))::").concat(s,"\n              else\n                ").concat((0,a.bD)(n),"[1:").concat(h,"]::").concat(s,"\n            end\n          else ").concat((0,a.bD)(n),"::").concat(s,"\n        end\n      "))});let q=w.join(","),E=new r.X().from("_base_query").select(q);return"".concat(v,"\n  ").concat(E.toSql({isCTE:!0,isFinal:!0}))}},64540:(e,n,t)=>{t.d(n,{A:()=>d});var a=t(80263),r=t(53239),s=t(82758),o=t(51859),i=t(71126),l=t(10406);let c=(0,r.forwardRef)((e,n)=>{let{title:t,description:c,size:d="small",visible:u,onCancel:m,onConfirm:p,loading:g,cancelLabel:h="Cancel",confirmLabel:f="Submit",confirmLabelLoading:b,alert:_,children:y,variant:v="default",disabled:x,...j}=e,[w,q]=(0,r.useState)(void 0!==g&&g);return(0,r.useEffect)(()=>{u&&void 0===g&&q(!1)},[u]),(0,r.useEffect)(()=>{void 0!==g&&q(g)},[g]),(0,a.jsx)(s.lG,{open:u,...j,onOpenChange:()=>{u&&m()},children:(0,a.jsxs)(s.Cf,{ref:n,className:"p-0 gap-0 pb-5 !block",size:d,children:[(0,a.jsxs)(s.c7,{className:(0,o.cn)("border-b"),padding:"small",children:[(0,a.jsx)(s.L3,{children:t}),c&&(0,a.jsx)(s.rr,{children:c})]}),_&&(0,a.jsx)(l.Z,{type:v,label:_.title,description:_.description,className:"border-r-0 border-l-0 rounded-none -mt-px [&_svg]:ml-0.5 mb-0",...null==_?void 0:_.base}),y&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.OO,{padding:"small",children:y}),(0,a.jsx)(s.pf,{})]}),(0,a.jsxs)("div",{className:"flex gap-2 px-5 pt-5",children:[(0,a.jsx)(i.$,{size:"medium",block:!0,type:"default",disabled:w,onClick:()=>m(),children:h}),(0,a.jsx)(i.$,{block:!0,size:"medium",type:"destructive"===v?"danger":"warning"===v?"warning":"primary",htmlType:"submit",loading:w,disabled:w||x,onClick:e=>{e.preventDefault(),e.stopPropagation(),p(),void 0===g&&q(!0)},className:"truncate",children:f})]})]})})});c.displayName="ConfirmationModal";let d=c},66586:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(80263),r=t(53239),s=t(64938),o=t(3891);function i(e,n){if(!n.error)return delete e[n.key],e;if(n)return{...e,[n.key]:n.error};throw Error()}function l(e){let{validate:n,...t}=e,[l,c]=(0,r.useReducer)(i,null),d=(0,s.Wx)({validateOnBlur:!0,...t,validationSchema:t.validationSchema,initialValues:t.initialValues,onSubmit:t.onSubmit,validate:n||function(){return l}});return(0,a.jsx)("form",{id:t.id,name:t.name,onSubmit:d.handleSubmit,className:t.className,style:t.style,method:"POST","data-sentry-component":"Form","data-sentry-source-file":"Form.tsx",children:(0,a.jsx)(o.h,{values:d.values,errors:d.errors,formContextOnChange:d.handleChange,handleBlur:d.handleBlur,touched:d.touched,fieldLevelValidation:function(e,n){c({key:e,error:n})},"data-sentry-element":"FormContextProvider","data-sentry-source-file":"Form.tsx",children:t.children({errors:d.errors,touched:d.touched,isSubmitting:d.isSubmitting,isValidating:d.isValidating,submitCount:d.submitCount,initialValues:d.initialValues,values:d.values,handleReset:d.handleReset,resetForm:d.resetForm,setFieldValue:d.setFieldValue})})})}},68495:(e,n,t)=>{t.d(n,{gt:()=>b,kd:()=>p});var a=t(17613),r=t(32144),s=t(56947),o=t(417),i=t(49015),l=t(81979),c=t(32036),d=t(96557),u=t(86118),m=t(52723);let p=5e4,g="\nCREATE OR REPLACE FUNCTION pg_temp.count_estimate(\n    query text\n) RETURNS integer LANGUAGE plpgsql AS $$\nDECLARE\n    plan jsonb;\nBEGIN\n    EXECUTE 'EXPLAIN (FORMAT JSON)' || query INTO plan;\n    RETURN plan->0->'Plan'->'Plan Rows';\nEND;\n$$;\n".trim(),h=e=>{var n,t,r;let{table:s,filters:o=[],enforceExactCount:i=!1}=e;if(!s)return"";if(i){let e=new a.Query().from(s.name,null!=(n=s.schema)?n:void 0).count();return o.filter(e=>e.value&&""!==e.value).forEach(n=>{let t=(0,m.b)(s,n);e=e.filter(n.column,n.operator,t)}),"select (".concat(e.toSql().slice(0,-1),"), false as is_estimate;")}{let e=new a.Query().from(s.name,null!=(t=s.schema)?t:void 0).select("*");o.filter(e=>e.value&&""!=e.value).forEach(n=>{let t=(0,m.b)(s,n);e=e.filter(n.column,n.operator,t)});let n=e.toSql(),i=new a.Query().from(s.name,null!=(r=s.schema)?r:void 0).count();o.filter(e=>e.value&&""!=e.value).forEach(e=>{let n=(0,m.b)(s,e);i=i.filter(e.column,e.operator,n)});let l=i.toSql().slice(0,-1);return"\n".concat(g,"\n\nwith approximation as (\n    select reltuples as estimate\n    from pg_class\n    where oid = ").concat(s.id,"\n)\nselect \n  case \n    when estimate = -1 then (select pg_temp.count_estimate('").concat(n.replaceAll("'","''"),"'))\n    when estimate > ").concat(p," then ").concat(o.length>0?"pg_temp.count_estimate('".concat(n.replaceAll("'","''"),"')"):"estimate","\n    else (").concat(l,")\n  end as count,\n  estimate = -1 or estimate > ").concat(p," as is_estimate\nfrom approximation;\n").trim()}};async function f(e,n){var t;let{queryClient:a,projectRef:r,connectionString:s,tableId:u,filters:m,roleImpersonationState:p,enforceExactCount:g}=e,f=await (0,i.Nj)(a,{projectRef:r,connectionString:s,id:u});if(!f)throw Error("Table not found");let b=(0,o.rH)(f),_=(0,l.Nf)(h({table:b,filters:m,enforceExactCount:g}),p),{result:y}=await (0,d.E)({projectRef:r,connectionString:s,sql:_,queryKey:["table-rows-count",b.id],isRoleImpersonationEnabled:(0,c._c)(null==p?void 0:p.role)},n);return{count:y[0].count,is_estimate:null!=(t=y[0].is_estimate)&&t}}let b=function(e){let{projectRef:n,connectionString:t,tableId:a,...o}=e,{enabled:i=!0,...l}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=(0,r.jE)();return(0,s.I)(u.j.tableRowsCount(n,{table:{id:a},...o}),e=>{let{signal:r}=e;return f({queryClient:c,projectRef:n,connectionString:t,tableId:a,...o},r)},{enabled:i&&void 0!==n&&void 0!==a,...l})}},72256:(e,n,t)=>{t.d(n,{A:()=>m});var a=t(80263),r=t(41226),s=t(52700),o=t(77877),i=t(59153),l=t.n(i),c=t(53239),d=t(71126);let u=(0,c.forwardRef)((e,n)=>{let{icon:t,title:i,description:u,url:m,urlLabel:p="Read more",defaultVisibility:g=!1,hideCollapse:h=!1,button:f,className:b="",block:_=!1}=e,[y,v]=(0,c.useState)(g);return(0,a.jsx)("div",{ref:n,role:"alert",className:"".concat(_?"block w-full":"","\n      block w-full rounded-md border bg-surface-300/25 py-3 ").concat(b),children:(0,a.jsxs)("div",{className:"flex flex-col px-4",children:[(0,a.jsxs)("div",{className:"flex items-center justify-between",children:[(0,a.jsxs)("div",{className:"flex w-full space-x-3 items-center",children:[t&&(0,a.jsx)("span",{className:"text-foreground-lighter",children:t}),(0,a.jsx)("div",{className:"flex-grow",children:(0,a.jsx)("h5",{className:"text-sm text-foreground",children:i})})]}),u&&!h?(0,a.jsx)("div",{className:"cursor-pointer text-foreground-lighter",onClick:()=>v(!y),children:y?(0,a.jsx)(r.A,{size:14,strokeWidth:1.5}):(0,a.jsx)(s.A,{size:14,strokeWidth:1.5})}):null]}),(u||m||f)&&(0,a.jsxs)("div",{className:"flex flex-col space-y-3 overflow-hidden transition-all ".concat(y?"mt-3":""),style:{maxHeight:500*!!y},children:[(0,a.jsx)("div",{className:"text-foreground-light text-sm",children:u}),m&&(0,a.jsx)("div",{children:(0,a.jsx)(d.$,{asChild:!0,type:"default",icon:(0,a.jsx)(o.A,{}),children:(0,a.jsx)(l(),{href:m,target:"_blank",rel:"noreferrer",children:p})})}),f&&(0,a.jsx)("div",{children:f})]})]})})});u.displayName="InformationBox";let m=u},73370:(e,n,t)=>{t.d(n,{i:()=>a});let a={tableEditor:(e,n)=>["projects",e,"table-editor",n].filter(Boolean)}},74945:(e,n,t)=>{t.d(n,{HQ:()=>y,nk:()=>j,vs:()=>x});var a=t(17613),r=t(55301),s=t(32144),o=t(56947),i=t(19898),l=t(417),c=t(49015),d=t(81979),u=t(32036),m=t(96557),p=t(86118),g=t(68495),h=t(52723);let f=e=>{var n;let t=e.columns.filter(e=>null==e?void 0:e.isPrimaryKey).map(e=>e.name);return 0!==t.length?t:[null==(n=e.columns[0])?void 0:n.name]};async function b(e){return new Promise(n=>setTimeout(n,e))}async function _(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:500;for(let r=0;r<=n;r++)try{return await e()}catch(e){if((null==e?void 0:e.status)===429&&r<n){var a;let n=null==(a=e.headers)?void 0:a.get("retry-after"),s=n?1e3*parseInt(n):t*Math.pow(2,r);await b(s);continue}throw e}throw Error("Max retries reached without success")}let y=async e=>{var n;let{projectRef:t,connectionString:r,table:s,filters:o=[],sorts:l=[],roleImpersonationState:c,progressCallback:u}=e;if(i.pe&&!r)return console.error("Connection string is required"),[];let p=[],y=new a.Query,v=s.columns.filter(e=>{var n;return(null!=(n=null==e?void 0:e.enum)?n:[]).length>0&&"array"===e.dataType.toLowerCase()}).map(e=>'"'.concat(e.name,'"::text[]')),x=y.from(s.name,null!=(n=s.schema)?n:void 0).select(v.length>0?"*,".concat(v.join(",")):"*");if(o.filter(e=>e.value&&""!==e.value).forEach(e=>{let n=(0,h.b)(s,e);x=x.filter(e.column,e.operator,n)}),0===l.length&&s.estimateRowCount<=g.kd){let e=f(s);e.length>0&&e.forEach(e=>{x=x.order(s.name,e)})}else l.forEach(e=>{x=x.order(e.table,e.column,e.ascending,e.nullsFirst)});let j=-1;for(;;){let e=500*(j+=1),n=(j+1)*500-1,a=(0,d.Nf)(x.range(e,n).toSql(),c);try{let{result:e}=await _(async()=>(0,m.E)({projectRef:t,connectionString:r,sql:a}));if(p.push(...e),null==u||u(p.length),e.length<500)break;await b(500)}catch(e){throw Error("Error fetching all table rows: ".concat(e instanceof Error?e.message:"Unknown error"))}}return p.filter(e=>1!==e[d.BO])};async function v(e,n){let{queryClient:t,projectRef:a,connectionString:s,tableId:o,roleImpersonationState:i,filters:p,sorts:g,limit:h,page:f}=e,b=await (0,c.Nj)(t,{projectRef:a,connectionString:s,id:o});if(!b)throw Error("Table not found");let _=(0,l.rH)(b),y=(0,d.Nf)((0,r.yG)({table:b,filters:p,sorts:g,limit:h,page:f}),i);try{let{result:e}=await (0,m.E)({projectRef:a,connectionString:s,sql:y,queryKey:["table-rows",null==_?void 0:_.id],isRoleImpersonationEnabled:(0,u._c)(null==i?void 0:i.role)},n);return{rows:e.map((e,n)=>({idx:n,...e}))}}catch(e){throw Error("Error fetching table rows: ".concat(e instanceof Error?e.message:"Unknown error"))}}let x=function(e){let{projectRef:n,connectionString:t,tableId:a,...r}=e,{enabled:i=!0,...l}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=(0,s.jE)();return(0,o.I)(p.j.tableRows(n,{table:{id:a},...r}),e=>{let{signal:s}=e;return v({queryClient:c,projectRef:n,connectionString:t,tableId:a,...r},s)},{enabled:i&&void 0!==n&&void 0!==a,...l})};function j(e,n){let{projectRef:t,connectionString:a,tableId:r,...s}=n;return e.fetchQuery(p.j.tableRows(t,{table:{id:r},...s}),n=>{let{signal:o}=n;return v({queryClient:e,projectRef:t,connectionString:a,tableId:r,...s},o)})}},82008:(e,n,t)=>{t.d(n,{Q:()=>r,i:()=>a});let a=["auth","cron","extensions","information_schema","net","pgsodium","pgsodium_masks","pgbouncer","pgtle","realtime","storage","supabase_functions","supabase_migrations","vault","graphql","graphql_public",t(8723).Lh],r=a.filter(e=>"extensions"!==e)},86118:(e,n,t)=>{t.d(n,{j:()=>a});let a={tableRows:function(e){let{table:n,roleImpersonationState:t,...a}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["projects",e,"table-rows",null==n?void 0:n.id,"rows",{roleImpersonation:null==t?void 0:t.role,...a}]},tableRowsCount:function(e){let{table:n,...t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["projects",e,"table-rows",null==n?void 0:n.id,"count",t]},tableRowsAndCount:(e,n)=>["projects",e,"table-rows",n]}}}]);